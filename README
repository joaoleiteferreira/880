 Don't forget to link the file "variables.lib" to this
 directory from the ARMS script directory so that "result"
 will work properly.

===============================================================================
Author: Kuntal Daftary                       Date: Thu Jan 22 18:45:45 PST 1998
-------------------------------------------------------------------------------
here is a list of some utilies that i have written up in the past six months
that some of you might find useful.

i will update this README file as i add more utilities to this list.
===============================================================================

atscron
-------
this is a script to run ats out of cron. simply follow the following steps:

% crontab -e
[puts u in an editor. add the following line in that editor, save and exit]

0,10,20,30,40,50 * * * * /vws/ddv/ios-np-reg/tools/atscron

bootrouter
----------
this is a handy little script that boots a single router with the specified
image. it takes an option to decide whether to clean the router before booting
or not.

take care that this does not work for booting routers off the flash and so do
not use for such images. currently the 3600 routers in regression testbeds have
been configured to _not_ use flash for booting but directly boot off the
network and so this script can be used to them too.

custom_report
-------------
this script should be used to generate summary files which can be fed to the
"result" script (below) and generate almost complete, well-formatted test
reports. to use this utility, add the following lines to your
$AUTOTEST/local/CONFIG

global env
source $env(AUTOTEST)/../tools/custom_report
set CUSTOM_REPORT_FUNC custom_report_func

xstatus
-------
this little thingy is a tk widget that should be started in the background. it
monitors periodically if there is a test running and if so, provides (almost)
up-to-date status of the running tests.

when there is no test running, it meekly disappears from the screen (not
iconize, disappear!) rather than clutter up the screen and re-appears when it
finds that a test has started, to do its job.

result
------
this script goes thru all the summary files and generates a report based on
them. you can ask for a report just based on a particular request id or feed
just certain summary files to it or ... there are a host of other options.

the generated report is well-formatted directly to be used in sending out to
the requestor.

the requirements of this script are as follows:

- the summary files should have been generated by the custom_report script
  above. otherwise it does not work.

- the test id's in all the suitefiles should be unique

router
------
no need to remember port numbers of console server now to log onto routers (esp
bridging / vlan testbeds). simply say 

% router <router-name>

and hey presto! u r there!

can also be used to cycle thru all the routers of a testbed or selective
routers only (useful for quickly checking the image versions on all routers of
a testbed quickly).

status
------
same thing as xstatus, only is text based and not a continuously running thing.
just gives the output on the terminal one time.

testid
------
helpful tool to find existance of duplicate test ids in a suite file. gives a
nicely formatted output of all the duplicate ids and the line numbers where
they occur which makes it easier to correct the suite file. optimized for speed.
also offers an option where it will "uniquize" the duplicate test ids and save
the original file with .bak extension.

makemap
-------
makes the MAP file for a new testbed. just make sure that the config files for
that testbed is correct and run tis script with testbed name as the argument.

ncvs
----
this script serves two functions. first it serves as a wrapper on top of
regular cvs command designed such that it provides fool proof setuid execution
which allows any member of ios_np_reg group to update the shared ATS tree.

secondly it also encompasses the functionality offered by "/autons/bin/cvsmode"
script to change the write permissions of the entire shared ATS tree for the
owner of the tree as well the group. alongwith it also plugs a security hole
left open by the "/autons/bin/cvsmode" (it has to, it runs setuid).

linktree
--------
this utility serves the purpose of "cvs update" for each pseudo-tree of
ios_np_reg members. it is based on the "install" script by autons folks but
performs the following extra operations:

- link "clean" to "testbed_clean.default"
- copy "/vws/ddv/ios-np-reg/doc/CONFIG" to "$AUTOTEST/local/CONFIG"
- touch "$AUTOTEST/local/lib/device.exp" file for scripts that still source it

maketree
--------
this is a little "backup" script which will create the initial "shared" ATS
tree. right now, the tree is already created. but this script serves as a "just
in case..." - final status, still working on it, not yet completed...


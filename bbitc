#!/bin/sh
# xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
set starter { ${1:+"$@"}
    shift
    shift
    export AUTOTEST
    AUTOTEST="${AUTOTEST-/autons/autotest}"
    exec $AUTOTEST/bin/expect -f $0 -- ${1:+"$@"}
}
# xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
##s
# $Id: bbitc,v 1.3 2006/09/21 18:51:19 tennis Exp $
# Copyright (c) 2005 Cisco Systems, Inc.
#
# Name:
# ~~~~~
#     bbitc - <B>uild <B>ig <I>ou <T>estbed <C>onfigs
#
#
# Purpose:
# ~~~~~~~~
#    Generate all the iou testbed config files.
#
#
# Author:
# ~~~~~~~
#    Tennis Smith
#
#
# Description:
# ~~~~~~~~~~~~
#
#
# Topology:
# ~~~~~~~~~
#
#
# Synopsis:
# ~~~~~~~~~
#
#
# Arguments:
# ~~~~~~~~~~
#
#
# Sample Usage:
# ~~~~~~~~~~~~~
#
#
# Pass/Fail Criteria:
# ~~~~~~~~~~~~~~~~~~~
#     Pass -
#
#     Fail -
#
#
# Sample Output:
# ~~~~~~~~~~~~~~
#
#
# Notes:
# ~~~~~
#
#
# Known Bugs:
# ~~~~~~~~~~~
#     None
#
#
# Todo:
# ~~~~~
#   - Add creation MASTER_MAP_FILE entries.
#
# End of Header

package require Cisco
package require TclUtils
package require parse_dashed_args
package require router_show
package require rtrUtils
source $env(AUTOTEST)/lib/cisco-shared/golden/pkg/UTX/UTX.exp
source $env(AUTOTEST)/stg_reg/utils/bbitc.lib

global MAX_ROUTERS_PER_TESTBED

# Write output to stdout *immediately*
fconfigure stdout -buffering none

array set special_labels {}
set devices {}
set SERIAL_CARD_COUNT 4
set ETHERNET_CARD_COUNT 4
set MAX_ROUTERS_PER_TESTBED 16
set IMAGE_NUMBERING_FORMAT {%4d}
set ALL_TESTBEDS 63

# Get rid of the formatting whitespace caused by
# indentation.
set REMOVE_LEADING_WHITESPACE {^ +([^ ]+.*)}

set CFG_FLAG_STR {__IOU__CONFIG__FILE__VAR__}
set TESTBED_NUMBER {__TBN__}
#
# Some instructions for emacs to help it format files
# properly. Put put this stuff in a file in the /tmp
# dir and then use it to do do the batch formatting
# below.
#
set lisp_file_contents {
    (setq indent-tabs-mode nil)
    (setq tab-width 4)
    (auto-fill-mode 1)
}

#first, get rid of the script name from the cli.
test_name [shift argv]


# Optional Parms
set opt_list {

    -testbeds ANY
    DEFAULT $ALL_TESTBEDS

    -router_count DECIMAL
    DEFAULT $MAX_ROUTERS_PER_TESTBED

    -memory_size DECIMAL
    DEFAULT 128

    -skip_config_files FLAG
    DEFAULT 0

    -skip_map_files FLAG
    DEFAULT 1

    -skip_netmap_files FLAG
    DEFAULT 1

    -skip_shell_alias_files FLAG
    DEFAULT 1

    -skip_emacs_alias_files FLAG
    DEFAULT 1
}

parse_dashed_args -args $argv \
    -optional_args [subst $opt_list]

#
# These are ports with special labels.  The port
# is defined by the x:y value.
#    where -
#       x = router number within the testbed
#           (i.e. unix*1* to unix*16*)
#       y = the port number on the router based
#           on the card/slot as defined in
#           CSCuk56580.
#
set special_labels(5:21) R5-R7-1
set special_labels(5:37) R5-R7-2
set special_labels(5:22) R5-R9-1
set special_labels(5:38) R5-R9-2

set special_labels(6:5)  R6-R7-1

set special_labels(7:5)  R6-R7-1
set special_labels(7:21) R5-R7-1
set special_labels(7:37) R5-R7-2
set special_labels(7:6)  R7-R9-1

set special_labels(9:6)  R7-R9-1
set special_labels(9:22) R5-R9-1
set special_labels(9:38) R5-R9-2


puts "\nBuilding $testbeds testbed config files ...\n"

#
# Build the testbed numbers requested.
#
for { set tb 1 } {$tb <=  $testbeds } { incr tb } {

    set testbed_number $tb

    puts "\ntestbed$testbed_number:\nCreating IOU configs with the following parms:\
      \nImages per testbed...........$router_count\
      \nEthernet cards per router....$ETHERNET_CARD_COUNT\
      \nSerial cards per router......$SERIAL_CARD_COUNT\
      \nMemory size per router.......$memory_size\n"

    set tbn $testbed_number

    set tb_def "
    # -------------------------------------------------------------------------
    # Set testbed name
    # -------------------------------------------------------------------------
    set this_testbed iou_testbed$tbn
    set iou_mem_size $memory_size

    if \[info exists env(USE_EARMS)\] {
        set testbeds \$this_testbed
    }
    "

    puts "Building config file for testbed $tbn ..."

    set cfg_filename "/tmp/iou_testbed$tbn.config"
    set cfg_file_var [cconcat "iou_testbed" $tbn "_config_file_already_sourced"]
    set map_filename "/tmp/iou_testbed$tbn.MAP"
    set map_file_var [cconcat "iou_testbed" $tbn "_map_file_already_sourced"]
    set net_filename "/tmp/NETMAP.itb$tbn"
    set batch_elisp_filename "/tmp/batch-emacs.el"
    set csh_alias_filename "/tmp/alias_iou_testbed$tbn.csh"
    set elisp_alias_filename "/tmp/alias_iou_testbed$tbn.el"
    set device_output {}
    catch { file delete -force $batch_elisp_filename }

    set lfh [open $batch_elisp_filename w]

    #
    # Get rid of any extra whitespace in the contents of our lisp code
    # prior to writing it to a file.
    #
    regsub -line -all -- \
        $REMOVE_LEADING_WHITESPACE $lisp_file_contents \
        {\1} lisp_file_contents

    #
    # Now we have basic formatting instructions for emacs to use in batch
    # mode (see below)
    #
    puts $lfh  $lisp_file_contents

    flush $lfh

    close $lfh

    catch {unset devices}

    #
    # Create the list of devices used in this testbed.
    #
    for { set i 1 } { $i <= $router_count } { incr i } {

        set rname [cconcat itb$tbn _ unix $i]

        ipsec::debug "setting rname = $rname"
        lappend devices $rname

        #
        # Calculate the backbone connection addr by adding the device
        # number ( max devices per testbed * testbed number + testbed
        # device number) to the base backbone addres (223.0.0.1).
        #
        set backbone_addr($rname)  [bbitc_calc_backbone_address \
                                        -increment [bbitc_device_number \
                                                        -testbed_number $tbn \
                                                        -device_number $i]]
    } ; # end for

    ipsec::debug "devices = $devices"


    #
    # Build file unless the user skips it.
    #
    if {$skip_config_files} {

        puts "Skipping config file creation..."

    } else {

        catch { file delete -force $cfg_filename }

        set cfh [open $cfg_filename w]

        #
        # Insert our particular config file name into the standard
        # config file header.
        #
        regsub -line -all -- $CFG_FLAG_STR $tcl_file_header \
            $cfg_file_var formatted_tcl_cfg_file_header

        #
        # Make the device list formatting to fit inside 80 cols
        #
        set device_output [cconcat $device_output "set device_list \{ \\\n"]
        # Pull off 3 device names at a time.
        foreach {d1 d2 d3} $devices {
            set device_output [cconcat $device_output "$d1 $d2 $d3" " \\\n"]
        }
        set device_output [cconcat $device_output "\}"]

        puts $cfh $formatted_tcl_cfg_file_header
        puts $cfh $header
        puts $cfh $globals
        puts $cfh $tb_def
        puts $cfh $tftp_def
        puts $cfh $passwords
        puts $cfh $device_output
        puts $cfh $device_list_vars
        puts $cfh $versions
        puts $cfh "set TYPE(\$this_testbed) \{unix\}"
#         puts $cfh $earms_clean
#         foreach dev $devices {
#             puts $cfh \
#                 "\n\{ [expr { [lsearch $devices $dev] + 1 }] \
#                   stg_clean_router $dev \}"
#         } ; # end foreach
#         puts $cfh "\n\}\n\}\n\}\n\n\n"

        #
        # Set the testbed number inside our path settings which
        # make E-ARMS *think* we're an e-Arms testbed only.
        #
        regsub -line -all -- \
            $TESTBED_NUMBER $fakeout \
            $testbed_number formatted_fakeout

        ipsec::debug "fakeout is now:\n$fakeout"
        puts $cfh $formatted_fakeout

        # running count of unix instance.
        set j 1

        #
        # print device definitions
        #
        foreach dev $devices {
            set dev_num [bbitc_device_number \
                             -testbed_number $tbn \
                             -device_number $j]
            set dev_num_formatted [format $IMAGE_NUMBERING_FORMAT $dev_num]
            puts $cfh \
                "set _device($dev) \"ats_iou connect $dev $dev_num_formatted\""
            incr j
        } ; # end foreach

        puts $cfh "\n"

        set j 1

        #
        # Define how much memory and how many interfaces
        # we want.
        #
        foreach dev $devices {
            set dev_num [bbitc_device_number \
                             -testbed_number $tbn \
                             -device_number $j]
            set dev_num_formatted [format $IMAGE_NUMBERING_FORMAT $dev_num]
            puts $cfh "set iou($dev) \"$dev_num_formatted \
           -e$ETHERNET_CARD_COUNT -s$SERIAL_CARD_COUNT -m\$iou_mem_size\""
            incr j

        } ; # end foreach

        puts $cfh "\n"

        #
        # Define how the images will come up (without an nvram config) and
        # what directory will have the NETMAP file.
        #
        foreach dev $devices {
            puts $cfh \
                "set iou_flags($dev) \"-console_timeout 2000 -erase_nvram -path \$path\""
        } ; # end foreach

        #
        # Set the default config for each interface.
        #
        foreach dev $devices {

            puts $cfh "\nset defaultconfig($dev) \{
            hostname $dev
            no ip domain-lookup;
            ip routing
            !
            ! Make sure debug and log messages are in local time.
            service timestamps debug datetime localtime show-timezone msec
            service timestamps log  datetime localtime show-timezone msec
            !
            clock timezone PT -8
            no service config
            ip subnet-zero
            ip route 171.0.0.0 255.0.0.0 223.0.0.1
            ip route 172.0.0.0 255.0.0.0 223.0.0.1
            !
            interface Ethernet0/0
            ip address $backbone_addr($dev) 255.255.0.0
            ! hack workaround for CSCeh74279
            mac [bbitc_mac_hack $backbone_addr($dev)]
            duplex full
            no shutdown
            !
           \}"

        } ; # end foreach

        puts $cfh "\n"

        puts $cfh $easy_defs

        puts $cfh $footer
        puts $cfh "\n"
        flush $cfh
        close $cfh

        #
        # Now, make the file contents pretty. We do this by calling Emacs
        # in batch mode and telling it to indent ("prettify") file's contents.
        #
        catch {exec /usr/local/bin/emacs21            \
                   -batch                             \
                   $cfg_filename                      \
                   --no-init-file                     \
                   --no-site-file                     \
                   --load $batch_elisp_filename       \
                   --eval "(indent-region (point-min) (point-max) nil)" \
                   -f save-buffer >& /dev/null}
    } ; # end if

    #
    # config file done.  Now, on to the map file.
    #


    #
    # Do we skip this step?
    #
    if {$skip_map_files} {

        puts "Skipping map file creation"

    } else {

        puts "Building map file for testbed $tbn ..."
        #
        # Insert our particular config file name into the standard
        # config file header.
        #
#         regsub -line -all -- $CFG_FLAG_STR $tcl_file_header \
#             $map_file_var formatted_tcl_map_file_header

        catch { file delete -force $map_filename }

        set mfh [open $map_filename w]

#         puts $mfh $formatted_tcl_map_file_header
        puts $mfh $map_file_header

        bbitc_map_file_entries \
            -testbed $testbed_number \
            -routers_per_testbed $router_count \
            -special_labeling special_labels \
            -outfile $mfh

        puts $mfh "\}"

        puts $mfh $footer

        flush $mfh

        close $mfh

        ipsec::debug "Starting batch formatting..."
        #
        # Now, make the file contents pretty just like above
        #
        catch {exec /usr/local/bin/emacs21            \
                   -batch                             \
                   $map_filename                      \
                   --no-init-file                     \
                   --no-site-file                     \
                   --load $batch_elisp_filename       \
                   --eval "(indent-region (point-min) (point-max) nil)" \
                   -f save-buffer}

    } ; # end if

    #
    # Create map files?
    #
    if {$skip_netmap_files} {

        puts "Skipping NETMAP file creation"

    } else {

        #
        # Do the same with the NETMAP file
        #
        puts "Building NETMAP file for testbed $tbn ..."

        catch { file delete -force $net_filename }

        set netfh [open $net_filename w]

        catch {unset outmap}

        set outmap $netmap_template

        #
        # Walk thru the devices and set vars to match
        # those in the template.
        #
        for {set i 0} {$i < [llength $devices]} {incr i } {
            set r$i [bbitc_device_number \
                         -testbed_number $tbn \
                         -device_number $i]
        } ; # end for

        # Set the var in the template which is used for
        # IOUNet and IOULive to be the last router number
        # possible in our testbed.
        set r_last [bbitc_device_number             \
                        -testbed_number $tbn        \
                        -device_number $router_count]

        #
        # Now set all the vars in our template to the values we just
        # set above.
        #
        set outmap [subst -nobackslashes -nocommands $outmap ]

        #
        # Getting rid of leading whitespace is really the only
        # thing we need to do for this file.
        #
        regsub -line -all -- $REMOVE_LEADING_WHITESPACE $outmap {\1} outmap

        puts $netfh $outmap

        puts $netfh $c_footer

        flush $netfh

        close $netfh

    } ; # end if


    #
    # Build emacs alias files?
    #
    if {$skip_emacs_alias_files} {

        puts "Skipping emacs alias file creation.."

    } else {

        puts "Building emacs lisp aliases file for testbed $tbn ..."

        catch { file delete -force $elisp_alias_filename }

        set lah  [open $elisp_alias_filename w]

        puts $lah $el_header

        set rtr_out [bbitc_bld_elisp_router_aliases -testbed_number $testbed_number]

        puts $lah $rtr_out

        set el_out [bbitc_bld_elisp_whole_testbed_aliases \
                        -testbed_number $testbed_number]

        puts $lah $el_out

        puts $lah $el_footer

        flush $lah

        close $lah


        #
        # Now, make the file contents pretty just like above
        #
        catch {exec /usr/local/bin/emacs21            \
                   -batch                             \
                   $elisp_alias_filename              \
                   --no-init-file                     \
                   --no-site-file                     \
                   --load $batch_elisp_filename       \
                   --eval "(indent-region (point-min) (point-max) nil)" \
                   -f save-buffer}
    } ; # end if


    #
    # Build shell alias files?
    #
    if {$skip_shell_alias_files} {

        puts "Skipping shell alias file creation..."

    } else {
        puts "Building csh aliases file for testbed $tbn ..."

        catch { file delete -force $csh_alias_filename }

        set cah [open $csh_alias_filename w]

        puts $cah $csh_header

        set csh_out [bbitc_bld_csh_aliases -testbed_number $testbed_number]

        #
        # Get rid of any extra whitespace in the contents of our lisp code
        # prior to writing it to a file.
        #
        regsub -line -all -- \
            $REMOVE_LEADING_WHITESPACE $csh_out \
            {\1} csh_out_formatted

        puts $cah $csh_out_formatted

        puts $cah $csh_footer

        flush $cah

        close $cah

    } ; # end if

    puts "testbed$tbn: Completed"
} ; # end for


# -----------------------------------------------------------------------------
#                            CVS MAINTENANCE LOGS
#                            ~~~~~~~~~~~~~~~~~~~~
# $Log: bbitc,v $
# Revision 1.3  2006/09/21 18:51:19  tennis
#
# Various updates to some minor support utilities.
#
# Revision 1.2  2006/05/03 22:47:28  tennis
#
# Add mapdirs
#
# Revision 1.1  2006/03/15 17:28:02  tennis
#
# Initial commit
#
#
# -----------------------------------------------------------------------------
# Local Variables:
# mode: tcl
# End:

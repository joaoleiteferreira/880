Running a test using AUTOTEST:

To run a suite file of testcases, we need:
1. a queue file where is is specified the images that are to be loaded in the routers
2. the respective images
2. a suite file containing the testcases
4. a soft link between from the $AUTOTEST/local/images and the actual place where the 
images are kept
The images are usally kept in the:
$AUTOTEST/local/images/aux_images
This directory has to exist in order for ARMS to work.


example of a queue file (ex. fw-core.queue):
noclean: 1
stop: 0
pause: 0
testbed: fw1
reason: fw-core
mailto: leleonar
boot: fw1-1601a c1600-nosy-mz.121-7-daftary1007603930
boot: fw1-7200a c7200-tspgen-mz.122-0.14-daftary1007603930
boot: fw1-2520a c2500-dos-l.121-7-daftary1007603930
boot: fw1-2611a c2600-io3-mz.121-7-daftary1007603930
boot: fw1-1603a c1600-nosy-mz.121-7-daftary1007603930
boot: fw1-3620a c3620-io3-mz.121-7-daftary1007603930
boot: fw1-2513a c2500-dos-l.121-7-daftary1007603930
boot: fw1-1605a c1600-nosy-mz.121-7-daftary1007603930
boot: fw1-2513b c2500-dos-l.121-7-daftary1007603930
boot: fw1-2514a c2500-dos-l.121-7-daftary1007603930
boot: fw1-3640a c3640-io3-mz.ids_perf-daftary1007603930



The 'noclean' option takes values of 0 or 1 and means that the routers should be clean 
before the test (or not)
In case the images have been loaded manually, noclean should be set to 1

Example of a suite file (fw-core.suite):

functionality/iosfw/all_fw_inspect 3 { { reg-fw-ss1 {le0:7 192.168.16.116}} { 
reg-fw-ss2 {le0:7 192.168.116.117}} } { {fw1-3640a {in ethernet0/0 192.168.16.2} {out 
ethernet0/1 192.168.116.2} {inspect in} {nat off static dynamic overload}  }  }  
{switch fast flow cef} {test_app rlogin telnet ftp}

With this script CBAC is tested for 'rlogin telnet ftp' applications. reg-fw-ss1 is 
the client Sun machine and reg-fw-ss2 is the server.
The Unit Under Test is the router fw1-3640a.


To start the test, just type:
autotest -i <test_id> &
This will start autotest running all testcase of the suite file (in background).
In the example above, the testid is: 'fw-core' 



To check the status of the regression, this command can be type a terminal window:
/auto/vwsdsd/sisu-reg/arms_tools/status

To see it in a graphical format, type:
/auto/vwsdsd/sisu-reg/arms_tools/xstatus &

When the test has finished, an email is sent to the userids mention in the queue file 
on the field: mailto

This email contatain the summary of the run. 
The summary file of the run is also created on the 
$AUTOTEST/local/images directoy.
There is also a report file, with additional information.

If some testcases failed, a <testid>.rerun testfile is also created.
This is an example of the files at the end of the run
-rw-r--r--   1 leleonar eng4         675 Dec  5 23:20 fw-core.queue
-rw-rw-r--   1 leleonar eng4      138800 Dec 18 13:35 fw-core.report
-rw-r--r--   1 leleonar eng4         230 Dec 18 12:42 fw-core.rerun
-rw-r--r--   1 leleonar eng4        3560 Dec 18 12:35 fw-core.suite
-rw-rw-r--   1 leleonar eng4      184911 Dec 18 13:35 fw-core.summary


Below is a partial example of the summary file:
This file can be very useful to trackdown failures that occured during testing. 
Is also shows where the clompleted logs have been stored in the field 'Archived File'

To debbug the failures it is usually necessary to decrompress this file.
In the example below, type:

zcat fw-core.fw1.Dec-18-01-13:35:44.tar.Z | tar xvf -

An individual log file will be avaliable for each testcase.

The field 'Successes' shows the number of testcases that passed.
The field 'Aborted' shows the number of testcases that did not run till the end due to 
some major failure (for example is the image does not support CBAC) is aborts the 
test.
The field 'Never ran' shows the number of testcases that did not run because of some 
catastrophic error, for example when autotest cannot find the script file!
The 'Total' is the number os tescases. Each suite line that starts 
functionality/xxx/script-name is counted has on testcase. (empty line do not count)
The 'Elapsed time' is the duration of the run.

------------------------------TEST RESULTS EXPORT------------------------------

-----------------------------AUTOMATED TEST RESULTS-----------------------------
Reason  : daftary1007603930
Image       : fw-core (Dec-12-01 09:41:01)
Suites      : 1
Successes   : 8
Failures    : 0
Aborted     : 0
Never ran   : 0
Total       : 8
Requested   : 1 thru 8
Crashes     : 0
Pauses      : 0
Reloads     : 0
Submitter   : cms
Testbed     : fw1
Test Host   : leleonar-u10
Tftp Host   : dirt (172.19.192.102)
Test Version: 12.2(20011107:123710)
Version     : IOS (tm) 3600 Software (C3640-IO3-MZ), Experimental Version 
12.2(20011107:123710) [daftary-ids_perf_2 126]
Csccon Id   : 3.4
Autotest Id : 3.6
Start Time  : Dec-18-01 12:48:22
End Time    : Dec-18-01 13:35:21
Delay:      : 6 days 3 hours 54 mins
Elapsed Time: 46 mins
Report File : /auto/vwsdsd/sisu-reg/leleonar/local/images/fw-core.report
Suite File  : /auto/vwsdsd/sisu-reg/leleonar/local/images/fw-core.suite
Archive File: 
/auto/vwsdsd/sisu-reg/leleonar/local/archive/01-12/fw-core.fw1.Dec-18-01-13:35:44.tar.
Z


------------------------------------SUMMARY------------------------------------

Name                                passed      failed   never_ran     aborted
----                                ------      ------   ---------     -------

functionality/iosfw2/fw_script           8           0           0           0  

----------------------------------DIAGNOSTICS----------------------------------
Test Id: in-none
Status: passed
Logfile Errors: yes
Version:
Desc: Platform 3640, Media ethernet, Inspection in
Test name: functionality/iosfw2/fw_script
Parameters: -topology { { gen { int out type ethernet network gennet addr 0 } { type 
unix-ws role gen match machine client } }
 { uut { int in network gennet type ethernet addr 0 } { int out network refnet type 
ethernet addr 0 } { type 3640 inspect in r
ole uut } } { ref { int in network refnet type ethernet addr 0 } { type unix-ws role 
ref match machine server } } } -tests ale
rts -switch {fast flow cef}
Suitefile line number: 1
Diagnostics:
                [info-0] fw_script: uut for the current topology is fw1-3640a(uut)
                [info-0] fw_script: configuring fast switching mode for testing
                [info-0] fw_script: starting alerts test on fw1-3640a
                [info-1] alert_msgs: testing "FW-3-SMTP_INVALID_COMMAND" under "off 
on" case
                [pass-1] alert_msgs: test for FW-3-SMTP_INVALID_COMMAND passed
                [info-1] alert_msgs: testing "FW-4-TCP_MAJORDOMO_EXEC_BUG" under "off 
on" case
                [pass-1] alert_msgs: test for FW-4-TCP_MAJORDOMO_EXEC_BUG passed
                [info-1] alert_msgs: testing "FW-4-TCP_SENDMAIL_OLD_SIG" under "off 
on" case



RE-RUNNING FAILED TESTCASES

If some testcases failed, there is no need to re-run the all suite of tests.
Just copy the .rerun file over the .suite file and again start the test:
autotest -i <test_id> &



DEBUGGING FAILURES (RUNNNING THE TEST INTERACTIVELY)

The script can also be run in interactivelly mode, to help debug failures.
In this case, only one suite line is needed.
For example, if we want to test 'telnet' with CBAC, we can do the following:
1. cd $AUTOTEST/local/tests/functionality/iosfw
2. create a file called test, with the suite line, example:
set env(_ATS_TESTBED) fw1
set argv {
functionality/iosfw/all_fw_inspect 3 { { reg-fw-ss1 {le0:3 192.168.23.116}} { 
reg-fw-ss2 {le0:3 192.168.123.117}} } { {fw1-2611a {in ethernet0/0 192.168.23.2} {out 
ethernet0/1 192.168.123.2} {inspect in} {nat off}  }  }  {switch fast} {test_app 
telnet} 
}

We need to specified the testbed name, because interactivelly this variable is not 
read.
4. start expect by typing: expect
5. source the suite file by typing: 'source test'
6. source the script to start the test: 'source all_fw_inspect'

Now the test is running! It can be stopped by typing 'CRTL-c'. This allow us to telnet 
into the box and to try the commands manually, enabling also debugs.



ABORTING THE RUN

If for some reason we want to stop Autotest gracefully, (to avoid waiting for it to 
finish all testcases) we can do it by creating a <test_id>.abort file under
$AUTOTEST/local/images directory.
This will make Autotest stop at the end of the current testcase. (the remaing 
testcases will appear in the summary file as 'never ran').

To start running the testcases again, make sure to delete the .abort file before 
starting autotest. 






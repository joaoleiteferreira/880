#######################  CONFIG FILE FOR waasperf2 testbed  ######################
#                                                                             #
#     Header file for autotest. Follow the steps to customise as needed.      #
#                                                                             #
###############################################################################

###############################################################################
# Step 1: Uncomment the following line and enter the NAME of the
# tftpserver you will be using to netboot. Whoever runs autotest will
# need to be able to rcp file to this machine name without entering a
# password.
#------------------------------------------------------------------------------
# Set these in your local CONFIG file
###############################################################################

set EARMS_AUTOTEST_CONCURRENCY "0"

set this_testbed rmurthy-performance
set testbeds $this_testbed

set BOOTDIR {/auto/tftp-ios-crypto}
set TFTPDIR {/auto/tftp-ios-crypto}
set IMAGEDIR {/auto/tftp-ios-crypto}

global MAPDIR env
global tb_tftp_server_name
global tb_tftp_server_addr
global tb_device_configs
global tb_clean_cmd
global tb_devices
global _device
global tb_passwd
global csccon_default
global defaultconfig 
global postconfig


# platform pattern used by csccon_get_platform_info for the 3845 & 2811
set csccon_default(platform_pattern) {platform {^(.+) \(revision.+\)}}

###############################################################################
# Step 2: Uncomment the following line and enter the IP address of the
# tftpserver you entered in step 2.
#------------------------------------------------------------------------------
# Set these in your local CONFIG file
###############################################################################

set TFTPSERVERADDR 128.107.150.5
set TFTPSERVERNAME joao-lnx
set tb_tftp_server_name($this_testbed) joao-lnx
set tb_tftp_server_addr($this_testbed) 128.107.150.5

#set TFTPSERVERADDR 171.69.1.129
#set TFTPSERVERNAME  dirt
#set tb_tftp_server_addr($this_testbed) 171.69.1.129
#set tb_tftp_server_name($this_testbed) dirt

###############################################################################
# Step 3: Optional -- Uncomment the following line and enter the Email
# name of an administrator. This person gets notified every time a run
# pauses. If no-one should be notified, just leave it commented out.
#------------------------------------------------------------------------------
# Set these in your local CONFIG file
###############################################################################

set ADMIN cipe-sec-earms@cisco.com

###############################################################################
# Step 4: Optional -- Uncomment the following line and enter the Email
# name of person who should see *all* run reports. If there is no-one
# who should see all of these, just leave it commented out.
# An autotest summary report is mailed to:
#       1) The owner of the image
#       2) The owner of the qfile (if not the same as owner of image)
#       3) The alias that this REPORTS variable is set to
# Note: Setting the mailto option in the queue file will override
# all three of the above.
#------------------------------------------------------------------------------
# Set these in your local CONFIG file
###############################################################################

# set ADMIN

###############################################################################
# Step 5: The Automated Test System paramater.
# Uncomment the following line and set the age (in days) for
# files which to be expired from the images directory. Files older
# than this will be purged nightly when you set up the appropriate
# cron job (see the man page).
#------------------------------------------------------------------------------
# Set these in your local CONFIG file
###############################################################################

# set PURGE 21

###############################################################################
# Autotest will abort a test run when 10 catastrophic errors occur.
# Uncomment the following line and set the number of catastrophic errors
# to abort a test run. Setting this number to -1 will not abort a test
# run regardless the number of catastrophic errors occur.
#------------------------------------------------------------------------------
# Set these in your local CONFIG file
###############################################################################

# set MAX_ERRORS 10

###############################################################################
# Step 6: Uncomment the following line to tell the system about its
# testbeds. If a testbed doesn't appear in this list, Autotest will
# never allow a run on it under any circumstances, even if you specify
# the testbed in your queue file.
#------------------------------------------------------------------------------
# This needs to be treated equally in all config files, i.e., either comment
# this statement out in all files or dont comment it in all files.
###############################################################################

if {[info exists env(USE_EARMS)]} {
    set testbeds $this_testbed
}

###############################################################################
# Step 7: Optional -- Uncomment the following line to tell autotest
# which testbeds to do automatic selection on. When you don't specify
# a testbed for an image in its queue file, autotest will select one
# from this list. If you don't want autoselection, simply leave it
# commented out.
#------------------------------------------------------------------------------
# Set these in your local CONFIG file
###############################################################################

# set AUTOSELECT {}

###############################################################################
# Step 8: Tell autotest about the routers in each testbed. The first
# example says that testbed agsa contains three routers named agsa1,
# agsa2 and agsa3. You can use whatever names you like, but we find
# the convention useful.
###############################################################################


###############################################################################
# ipsec testbeds ROUTERS array in absence of parallel testbed looks like this #
###############################################################################


set ROUTERS(rmurthy-performance) {\
                         murthy-3945                 \
                         peer-3945e           \
                         pmod-3845      \
                         waasperf2-avalanche  \
                         waasperf2-reflector  \
                     }

set tb_devices($this_testbed) $ROUTERS($this_testbed)

###############################################################################
# Step 9: Tell autotest about the various image types and how to
# identify them using the image version string. The given examples
# identify ags, 7k, ts, xx, igs and cancun as valid image types.
# Any other image type submitted to autotest will not be recognized,
# and will result in an image validation failure.
# Note: The given string will be used as a regexp pattern
#------------------------------------------------------------------------------
# Set these in your local CONFIG file
###############################################################################

set IMAGE_TYPE(ags)     {GS Software \(GS3}
set IMAGE_TYPE(ts)      {CS Software \(CS500}
set IMAGE_TYPE(1000)    {1000 Software \(C1000}
set IMAGE_TYPE(ls1010)  {IISP Software \(LS1010}
set IMAGE_TYPE(1200)    {1200 Software}
set IMAGE_TYPE(1600)    {1600 Software \(C1600}
set IMAGE_TYPE(2500)    {2500 Software \(C2500|3000 Software \(IGS\-}
set IMAGE_TYPE(2600)    {2600 Software \(C2600}
set IMAGE_TYPE(2800)    {2800 Software \(C2800}
set IMAGE_TYPE(3620)    {3600 Software \(C3620}
set IMAGE_TYPE(3640)    {3600 Software \(C3640}
set IMAGE_TYPE(3745)    {3700 Software \(C3745}
set IMAGE_TYPE(3825)    {3800 Software \(C3825}
set IMAGE_TYPE(3845)    {3800 Software \(C3845}
set IMAGE_TYPE(3945)    {3900 Software \(C3945}
set IMAGE_TYPE(2900)    {2900 Software \(C2900}
set IMAGE_TYPE(1900)    {1900 Software \(C1900}
set IMAGE_TYPE(4000)    {4000 Software}
set IMAGE_TYPE(xx)      {4000 Software|4500 Software}
set IMAGE_TYPE(4500)    {4500 Software \(C4500|4500 Software \(4500}
set IMAGE_TYPE(5000)    {5000 Software}
set IMAGE_TYPE(5200)    {5200 Software \(AS5200|5200 Software \(C5200}
set IMAGE_TYPE(5300)    {5200 Software \(AS5200|5200 Software \(C5200}
set IMAGE_TYPE(7k)      {GS Software \(GS7|7000 Software}
set IMAGE_TYPE(890)     {880 Software \(C890}
set IMAGE_TYPE(7200P)   {7200 Software \(C7200P}
set IMAGE_TYPE(7200)    {7200 Software \(C7200}
set IMAGE_TYPE(7606)    {7606 Software \(C7606}
set IMAGE_TYPE(C5RSM)   {C5RSP Software \(C5RSP}
set IMAGE_TYPE(rsp)     {GS Software \(VIP|VIP Software|RSP|RSP Software|7500 Software \(C7500}
set IMAGE_TYPE(vip)     {VIP Software \(RVIP}
set IMAGE_TYPE(805)     {805}
set IMAGE_TYPE(800)     {800}
set IMAGE_TYPE(870)     {870}

###############################################################################
# Step 10: For each testbed you've detailed above, say what type of
# testbed it is. one or more of above defined IMAGE_TYPES can be used.
#------------------------------------------------------------------------------
# Note: If multiple images are to be booted on the testbed, you need
# to specify a TYPE for *each* router on the testbed. (See the corea
# example below).
###############################################################################


set TYPE($this_testbed)    {7200P 3825 2900 2951 1900 GS 3845 3945 890 800 3945e}


set TYPE(murthy-3945)  3945
set TYPE(peer-3945e) 3945E
set TYPE(pmod-3845) 3845
set TYPE(waasperf2-avalanche) any
set TYPE(waasperf2-reflector) any


set tb_type(murthy-3945)  3945
set tb_type(peer-3945e) 3945E
set tb_type(pmod-3845) 3845
set tb_type(waasperf2-avalanche) any
set tb_type(waasperf2-reflector) any

###############################################################################
# Step 11: For each testbed you've detailed above, say what image
# versions the testbed can run supports. Currently, you can say one or
# more of 8.3, 9.0, 9.1, 9.21, 9.14, 9.17, or the string 'any'.
###############################################################################

set VERSIONS($this_testbed) any

###############################################################################
# Step 12: Optional -- If you have power cyclers connected to terminal
# servers, tell Autotest which terminal server hosts/lines control the
# power for which testbeds.  If you don't have power cyclers, just
# leave these lines commented out.
#
# Example: set TERMINAL_SERVER(agsy) {tsy 6 tsy 7}
#
###############################################################################

#set TERMINAL_SERVER($this_testbed) {-cs1 67} Need to check for power cycle !!!!!!

###############################################################################
# Step 13: Optional -- Set up the enable, tacacs and line passwords.
# You can then use the test_passwd subroutine to get these passwords.
# If these are not set, the test_passwd routine returns the default
# values.
# Usage: test_passwd <type> <string>
#    type  : This should be one of "enable", "tacacs", or "line"
#    string: This is the string that the passwords are indexed by.
#            (This defaults to an empty string if not specified).
# This procedure checks for the existence of the specified
# password in the CONFIG file, and if it exists, returns it.
# If, however, the specified password does not exist, then
# a default is returned. The defaults for the various types
# are: enable: "lab", tacacs: "", and line: ""
###############################################################################

set LINEPW($this_testbed)  lab

set ENABLEPW($this_testbed) lab
set TACACSPW($this_testbed) default
set TacacsPw($this_testbed) default

# Enable easyclean
set tb_passwd($this_testbed,enable)   "lab"
set tb_passwd($this_testbed,tacacs)   "default"
set tb_passwd($this_testbed,line)     "lab"

###############################################################################
# Step 14: Optional -- The following strings are automatically
# considered to be errors if a router outputs them on its console.
# These are case sensitive (perl) regular expressions. If your router
# produces any special error messages which don't already appear here,
# you may want to add them to this list.
###############################################################################

#set ERROR

###############################################################################
# Step 15: Optional -- Some messages look like errors e.g ones which
# begin with percent signs, but you want to ignore them because they
# aren't really errors. Until Router Development fixes them, you can
# add them to this list so Autotest doesn't report them as errors.
# Note: The given string will be used as a regexp pattern
###############################################################################

#set IGNORE

###############################################################################
# Step 16: For netbooting, you need to set the default configuration
# strings for each router in a testbed. Examples of how this is done
# on the Test Technologies Production testbeds are shown below.
###############################################################################


global defaultconfig postconfig


set defaultconfig(murthy-3945) {
    hostname murthy-3945
    enable password lab
    no ip domain-lookup
    no ip routing
    ip default-gateway 10.1.1.1
    service timestamps debug datetime msec localtime
    no service config
    clock timezone PST -8
    clock summer-time PDT recurring
    interface GigabitEthernet0/0/0
      ip address 10.1.1.14 255.255.255.0
      no shutdown
}

set defaultconfig(pmod-3845) {
    hostname pmod-3845
    enable password lab
    no ip domain-lookup
    no ip routing
    ip host PAGENT-SECURITY-V3 39.36.92.50 97.25.0.0
    ip default-gateway 10.1.1.1
    service timestamps debug datetime msec localtime
    no service config
    clock timezone PST -8
    clock summer-time PDT recurring
    interface GigabitEthernet0/1
      ip address 10.1.1.3 255.255.255.0
      no shutdown
}

set defaultconfig(peer-3945e) {
    hostname peer-3945e
    enable password lab
    no ip domain-lookup
    no ip routing
    ip default-gateway 10.1.1.1
    service timestamps debug datetime msec localtime
    no service config
    clock timezone PST -8
    clock summer-time PDT recurring
    interface GigabitEthernet0/0
      ip address 10.1.1.15 255.255.255.0
      no shutdown
}


set defaultconfig(waasperf2-waas) {}

set defaultconfig(waasperf2-avalanche) {}

set defaultconfig(waasperf2-reflector) {}

#############################################################################
# Now set the post config of each testbed here
#############################################################################


global defaultconfig postconfig

set postconfig(murthy-3945) {
    hostname waasperf2-72b
    enable password lab
    no ip domain-lookup
    no ip routing
    interface GigabitEthernet0/1
      no ip address
      shutdown
}

set postconfig(pmod-3845) {
    hostname pmod-3845
    enable password lab
    no ip domain-lookup
    no ip routing
    ip host PAGENT-SECURITY-V3 39.36.92.50 97.25.0.0
    ip default-gateway 10.1.1.1
    service timestamps debug datetime msec localtime
    no service config
    clock timezone PST -8
    clock summer-time PDT recurring
    interface GigabitEthernet0/1
        no ip address
        duplex full
    interface GigabitEthernet0/2
        no ip address
        duplex full
}

set postconfig(peer-3945e) {
    hostname peer-3945e
    enable password lab
    no ip domain-lookup
    no ip routing
    ip default-gateway 10.1.1.1
    service timestamps debug datetime msec localtime
    no service config
    clock timezone PST -8
    clock summer-time PDT recurring
    interface gig0/0
      no ip address
      shutdown
    interface gig 0/1
      ip address 10.104.200.29 255.255.255.0
      no shut
     router eigrp 100
	redistribute connected metric 1500 1 255 1 1500
}   


set postconfig(waasperf2-avalanche) {}

set postconfig(waasperf2-reflector) {}

# populate the Easy style config variables
#

#############################################################################
# Step 17. CSCCON's console procedure expects the router console port
# address to be defined in the /etc/hosts file or name service as
# "<router_name>-con". For example, if your router is named agsi1,
# then the name "agsi1-con" must be defined.  Notice that an IP
# address for each router console is required.
#
# If you want to save IP addresses, then connect a communications
# server asynchronous communications port to each router console port
# and assign an IP address to the communications server's LAN
# interface. If you decide to do this, then one needs to associate the
# router name with the communications server's IP address and
# asynchronous communications port number. CSCCON is expecting a Tcl
# array, _device to provide the association.
#
# There are two ways to include _device entries in this CONFIG file:
#
# 1) Include all _device entries in this file. Use the following lines
#    as an example if you want to use this method. The router name is
#    agsi1. The communications server's IP address is 198.92.45.19.
#    The communications server's asynchronous port is 6002.
#
#     global _device
#     set _device(agsi1) "telnet 198.92.45.19 6002"
#
# 2) Store all _device entries in $AUTOTEST/local/lib/device.exp.
#    If you want to use this method, uncomment the following seven lines:
#
#     global env
#     set device_file $env(AUTOTEST)/local/lib/device.exp
#     if { [file readable $device_file] && [file isfile $device_file] } {
#         if [catch "uplevel #0 source $device_file" errmsg] {
#             puts stderr "Error sourcing device file $device_file: $errmsg"
#         }
#     }
#
#############################################################################



global _device

set _device(murthy-3945)     "telnet 172.19.151.192 2009"
set _device(peer-3945e)     "telnet 172.19.151.192 2003"
set _device(pmod-3845)     "telnet 172.19.151.192 2004"
set _device(waasperf2-avalanche) "telnet 172.25.221.205"



#############################################################################
# Step 18: Optional -- If you are using $AUTOTEST/etc/clean to execute
# a list of commands, specify the lists here for each testbed. See the
# $AUTOTEST/etc/clean script header for more information.
#############################################################################

#########################################################################
# EARMS support
#########################################################################

set USE_DEFAULT_IMAGES 0

# Proc to mail error messages to testbed admin
proc mail_error { } {
    uplevel 1 {
        set body "
            eARMS Testbed: $env(EARMS_TESTBED_USED)
            eARMS Request ID: $env(EARMS_REQUEST_ID)
            eARMS Suite: [file join $env(EARMS_CATEGORY_PATH) $env(EARMS_SUITE_NAME)]
            Error Messages:\n$err
        "
        sendMailMsg "$ADMIN" {e-ARMS testbed config source error} "$body"
    }
}

set i 1
if { [ info exists env(EARMS_ROUTERS_USED) ] } {
    set clean_helper [ split $env(EARMS_ROUTERS_USED) "," ]
    set clean_section {}
    set CLEAN($this_testbed) {}
    foreach rtr $clean_helper {
        lappend clean_section "$i stg_clean_router $rtr"
        regsub -all -- {-|:|\.} $rtr {_} tmp_rtr
        # If image has not been provided by submitter
        if {![info exists env(EARMS_IMAGES_$tmp_rtr)]} {
            set USE_DEFAULT_IMAGES 1
        }
        incr i 1
    }
    # If we need to use default images because the submitter didn't \
    # provide images for all platforms involved in the test then we
    # need to source the file earms.images
    if {$USE_DEFAULT_IMAGES} {
        if {[info exists env(AUTOTEST) ]} {
            if {[catch {source $env(AUTOTEST)/etc/earms.images} err]} {
                puts stderr "Failed to source \
                    $env(AUTOTEST)/etc/earms.image: $err"
                # Need to send error message to ADMIN
                catch {mail_error}
            }
        }
    }
    lappend CLEAN($this_testbed) $clean_section
} else {
    set CLEAN($this_testbed) {
        {
            {1 stg_clean_router murthy-3945 }
        }
    }
}

#
# This is to allow "easyClean" to be used for loading
# our routers.
#
foreach rtr $tb_devices($this_testbed) {
    set tb_clean_cmd($rtr) stg_easyclean_router
} ; # end foreach

#
# eArms wanted this next setting
#
set tb_clean_sequence($this_testbed) $tb_devices($this_testbed)

#############################################################################
# Step 19: Optional -- Uncomment the following line to tell autotest to use
# the old (perl based) report generator instead of the default
# $AUTOTEST/etc/reportgen program to create the autotest summary report.
# (Note that the new reportgen program provides you with more features,
# such as the ability to customize the autotest summary format).
#############################################################################

# set REPORTGEN old

###########################################################################
# Step 19.0: Optional - The following keyword is used to tell Autotest
# to send Autotest results data to TIMS.  (See the Autotest Users
# Manual for additional information.)

#set POST on

###########################################################################
# Step 19.1: Optional - The following keyword is used to turn on the
# generation of unique test ID's in the Autotest results file.  (See
# the Autotest Users Manual for additional information.)

set UNIQUE_TID 1

###########################################################################
# Step 19.2: Optional - The following keyword is used to send TIMS
# attribute types and values to the TIMS importer.  The variable
# TIMS_ATTRIBUTE is a Tcl array variable.  The index to each element
# of the TIMS_ATTRIBUTE array variable must be the exact case
# sensitive TIMS attribute type.  The TIMS_ATTRIBUTE variable will be
# used if Autotest is exporting Autotest results data to TIMS.  (See
# the Autotest Users Manual for additional information.)
#
# NOTE: If you are exporting Autotest results to TIMS you **MUST** set
# the array variable TIMS_ATTRIBUTE(dns_name).  (See TIMS
# documentation for additional information about the use of the TIMS
# "dns_name" attribute.)
############################################################################

set TIMS_ATTRIBUTE(dns_name) tims.cisco.com/Tnr203p
set TIMS_ATTRIBUTE(GROUP) IKE-IPSEC

#############################################################################
# Step 20: Optional -- The following keyword is used to customize the
# autotest summary report format, and is supported only by the new
# reportgen program. You need to source the file that defines your custom
# report function, and then set the name of the custom report function to
# the CUSTOM_REPORT_FUNC keyword. If the CUSTOM_REPORT_FUNC keyword is
# defined, the reportgen program uses the function it points to to create
# the autotest summary report. Look at the reportgen man page
# ($AUTOTEST/man/manl/reportgen.l) and the file
# $AUTOTEST/lib/reportgen/custom_report.template for more details on the
# usage of the custom report feature.
#############################################################################

# if { [ info exists env(AUTOTEST) ]} {
#     source $env(AUTOTEST)/stg_reg/utils/custom_report
# } else {
#     source /auto/stg-devtest/earms/stg_reg/utils/custom_report
# }
# set CUSTOM_REPORT_FUNC custom_report_func

###############################################################################
# Step 21. Optional -- These variables allow other testbed dependent parameters
# like the PC addresses, BRI line phone numbers, etc to be used in a testbed
# independent way in the suite files. The way to use them is exactly like
# routers, i.e., simply use $option1 $option2 and so on in the order of
# definition below.
###############################################################################

# Options in this list are:
#  ISDN number for router7 - 3845a ($router7)
#  ISDN number for router5 - 3845b   (3845a uses this number to call 3845b)
#  Address of Radius server for this testbed
# ISDN Interface type on $router7
# ISDN Interface type on $router5
# Ipaddress of VPN client for this testbed

###############################################################################
# Step 22. This ghastly code is a workaround for proper functioning of scripts
# that still use coremap instead of the MAP file. The idea of the code is to
# ensure that changes in the testbed require changes in only the MAP file and
# not the coremap variable also.
##############################################################################
set tb_servers {
  { default 172.19.201.81 }
}

set TB_MAP_SECTION(traffic_gen) {
 { waasperf2-ixia
    { type:                      host                }
    { machine:                   ixia                }
    { addr:                      172.19.147.120      }
    { 4/1                        lanethernet3
      { type:                    gigabitethernet     }
      { ipaddr:                  5.0.0.2             }
      { ipgtwy:                  5.0.0.1             }
      { virtualipnet:            105.0.0.0/8         }
      { subintpool:              205.0.0.0/8         }
      { ipv6addr:                2001:400:1:5::2     }
      { ipv6gtwy:                2001:400:1:5::1     }
      { virtualipv6prefix:       105::/16            }
    }
    { 4/2                        lanethernet2
      { type:                    gigabitethernet     }
      { ipaddr:                  6.0.0.2             }
      { ipgtwy:                  6.0.0.1             }
      { virtualipnet:            106.0.0.0/8         }
      { subintpool:              206.0.0.0/8         }
      { ipv6addr:                2001:400:1:6::2     }
      { ipv6gtwy:                2001:400:1:6::1     }
      { virtualipv6prefix:       106::/16            }
    }
  }
  { waasperf2-avalanche
    { type:                      host                }
    { machine:                   avalanche           }
    { addr:                      172.25.221.205      }
    { hardware:                  2900                }
    { 5                          lanethernet0
      { type:                    gigabitethernet     }
      { ipaddr:                  21.0.0.2            }
      { ipgtwy:                  21.0.0.1            }
      { virtualipnet:            121.0.0.0/8         }
      { ipv6addr:                AAAA::1              }
      { ipv6addrprefix:          AAAA::/64            }
      { ip6_prefix_len:          64                  }
      { ipv6gtwy:                AAAA::1              }
      { virtualipv6prefix:       AAAA::/64            }
      { macaddr:                 00-15-17-82-C6-49   }
    }
  }
  { waasperf2-reflector
      { type:                   host                 }
      { machine:                reflector            }
      { hardware:               2900                 }
      { addr:                   172.25.221.205       }
      { 6                       lanethernet3
         { type:                gigabitethernet      }
         { ipaddr:              22.0.0.2             }
         { ipgtwy:              22.0.0.1             }
         { virtualipnet:        122.0.0.0/8          }
         { ipv6addr:            AAAB::1              }
	 { ipv6addrprefix:      AAAB::/64            }
	 { ip6_prefix_len:      64                   }
         { ipv6gtwy:            AAAB::1              }
         { virtualipv6prefix:   AAAB::/64            }
         { macaddr:             00-15-17-82-C2-4D    }
      }
  }
  { waasperf2-win2008server
      { type:                   host                 }
      { machine:                win2008server        }
      { hardware:               2900                 }
      { addr:                   22.0.0.20            }
      { gigabitethernet         lanethernet2         }
  }
}


set tb_map  [ subst -nocommands -nobackslashes  {
    {COLLECTOR_LINUX
        {hostname:             collector}
        {prompt:               "collector.*\#*?"}
        {username:              root}
        {enable_pw:             roZes123}
        {defaultgw:             172.19.147.1}
        {type:                  linux}
        {clients_interface     clients
            {type:               ethernet}
            {address:            172.19.147.137}
            {subnet:        255.255.255.0}
            {udpport:                9003}
            {udpport1:                2055}
        }
        {console_interface      console
            {type:           console}
            {address:        172.19.147.137}
            {port:           }
        }
    }
  { murthy-3945
    { type:                      3945         }
    { GigabitEthernet0/2         lanethernet0 }
    { GigabitEthernet0/1         lanethernet1 }
  }
  
   { pmod-3845
      { type:                      3845         }
      { GigabitEthernet0/0         lanethernet1 }
      { GigabitEthernet0/1         lanethernet2 }
    }
  
    { peer-3945e
      { type:                      3945e         }
      { GigabitEthernet0/1         lanethernet2 }
      { GigabitEthernet0/2         lanethernet3 }
    }
    
  $TB_MAP_SECTION(traffic_gen)
} ]

set TB_MAP(rmurthy-performance,default) $tb_map

set TB_MAP(rmurthy-performance,waas1) [subst -nocommands -nobackslashes {
  { murthy-3945
    { type:                      3945         }
    { GigabitEthernet0/2         lanethernet0 }
    { GigabitEthernet0/1         lanethernet1 }
  }
  
  { murthy-3945
     { type:                      3945         }
     { GigabitEthernet0/2         lanethernet0 }
     { GigabitEthernet0/1         lanethernet1 }
   }
   
    { pmod-3845
       { type:                      3845         }
       { GigabitEthernet0/0         lanethernet1 }
       { GigabitEthernet0/1         lanethernet2 }
     }
   
     { peer-3945e
       { type:                      3945e         }
       { GigabitEthernet0/1         lanethernet2 }
       { GigabitEthernet0/2         lanethernet3 }
    }
  
  
  $TB_MAP_SECTION(traffic_gen)
} ]



###############################################################################
# Step 23. Now run the installation script in the install directory,
# if you havent done so already.
###############################################################################
#### AUTOCOOKIE



set testbeds { \
rmurthy-performance \
 }


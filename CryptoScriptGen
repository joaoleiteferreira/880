set starter { ${1:+"$@"}
    shift
    shift
    export AUTOTEST
    exec $AUTOTEST/local/bin/expect -f $0 -- ${1:+"$@"}
}

#   Author: Ina Singh
#   Support: inasingh@cisco.com

 
#   Set Usage
set USAGE "USAGE: CryptoScriptGen <script> \[path]"

#   Parse the args
set scriptName [lindex $argv 1] ; # Script name is the first arg
set path "."

if {[llength $argv] < 2} {
    puts "\n*****************************************************************"
    puts "\nERROR:Invalid Number of Args\n \nINFO:$USAGE\n"
    puts "\n*****************************************************************"
    exit
}

set arglist [ split $scriptName "_" ]
set 1stvalue [lvarpop arglist]
set 2ndvalue [lvarpop arglist]
set 3rdvalue [lvarpop arglist]

puts "\n*****************************************************************"
puts "\nINFO:The scriptname args:  1stvalue = $1stvalue , 2ndvalue = $2ndvalue,\
      3rdvalue = $3rdvalue " 
puts "\n*****************************************************************"


set generic_script_flag 0


switch -regexp [string tolower $1stvalue] "^fn" {  
        puts "\nINFO:Your Script type is being determined as functional"
    } "^st" {
        puts "\nINFO:Your Script type is being determined as stress"
    } "^in" {
        puts "\nINFO:Your Script type is being determined as integration" 
    } "^pn" {
        puts "\nINFO:Your Script type is being determined as performance"
    } "^ne" { 
        puts "\nINFO:Your Script type is being determined as negative" 
    } default {
        puts "\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
        puts "\nINFO:You are making this as a regular script, \
               if you know ur script type"
        puts "\nINFO:Please use <test type>_<feature name>_\
               <EDCS No>_\[Section\]_\[Subsection\]"
        puts "\nINFO:Feature name is being determined as $1stvalue"
        set generic_script_flag 1 
    }

puts "\n*****************************************************************"

if { $generic_script_flag } {
    if {![regexp -nocase {^[0-9]+} $2ndvalue] } {
        puts "\nERROR:EDCS no is not found at $2ndvalue"
        puts "\nINFO:Since ur script is generic, please use \
              <feature name>_<EDCS No>_...format \n"
        puts "\n*****************************************************************"
        exit
    } else {
        set edcs_no $2ndvalue
        puts "\nINFO:EDCS no found , number is $2ndvalue "
        puts "\n*****************************************************************"
    }
} else {
    if {![regexp -nocase {^[0-9]+} $3rdvalue] } {        
        puts "\nERROR:EDCS no is not found at $3rdvalue "
        puts "\nINFO:Since ur script is not generic, please use \
              <test type>_<feature name>...format"
        puts "\n*****************************************************************"
        exit
    } else {
        set edcs_no $3rdvalue          
        puts "\nINFO:EDCS no found , number is $3rdvalue"
        puts "\n*****************************************************************"
    }
}

if {[llength $argv] > 2} {
    set path [lindex $argv 2]
}

#   Check to make sure the files are not there


if {[file exists [file join $path $scriptName]] || \
	[file exists [file join $path $scriptName.exp]]} {
    puts "\nERROR: File $path/$scriptName or $path/$scriptName.exp exists\n,\
          please remove before running CryptoScriptGen "
    puts "\n*****************************************************************"
    exit
}

#   Open the base file scriptName
if [catch {set fd [open [file join $path $scriptName] w+]} errMsg] {
    puts "\nERROR: Could not open file $path/$scriptName\n$errMsg "
    puts "\n*****************************************************************"
    exit
}

#   Put the default stuff into the file
puts $fd  " 
#***************************************************************************
#******                   SCRIPT HEADER                               ******
#*************************************************************************** 

set starter { \${1:+\"\$\@\"}
    shift
    shift
    export AUTOTEST
    exec \$AUTOTEST/local/bin/expect -f \$0 -- \${1:+\"\$\@\"}
}
#
# Name:
#     $scriptName
#
# Purpose:
#     Add a brief purpose statement here
#
# Author:
#     $env(USER) -- ($env(USER)@cisco.com)
#
# Maintainer:
#     $env(USER) -- ($env(USER)@cisco.com)
#
# Support Alias:
#     crypto-devtest@cisco.com
#
# References:
#     Add the EDCS title and Number here of the test plan(s) & functional spec 
#     that the script covers.
#     Testplan:  EDCS-$edcs_no
#     Spec:      EDCS-xxxxxx
#
# Description:
#     Add a high level description of what the test script does.
#
# Topology:
#
#  Add a simple topology diagram here (example below):
#     +-----------+   +-----------------+   +-------------+
#     | Generator |---| Unit Under Test |---|  Reflector  |
#     +-----------+   +-----------------+   +-------------+
#
#
# Synopsis:
#     This is the usage for the script and will be used to create the
#     job files.  Add any additional mandatory and optional arguments as needed
#
#     $scriptName  
#         -mandatory_arg1 <value> ... -mandatory_argN <value> \\
#         ?-optional_arg1 <value>? ... ?-optional_arg2 <value>?
#
# Arguments:
#     Describe what each argument is and what the values for it are.
#     mandatory and optional arguments added in the synopsis section must be
#     described .
#
#     
# Sample Usage:
#     This is a sample suite line for the script, make sure to add the 
#     the mandatory and optional arguments as well.
#
#     functionality/ipsec/ipsec_dgvpn_vrf -host1 \$router1 -host1_rp1_int lanethernet1..  
#
#
# Requirements:
#     package require AtsAuto
#     package require rtrUtils
#     package require topomap
#     package require Test
#     package require Async
#     package require rtrConfig
#     package require Ipsec
#     source \$env(ScriptPATH)/$scriptName.exp
#     Add any additional library or script requirements here.
#
# Pass/Fail Criteria:
#     PASS - Add your pass criteria here
#     FAIL - Add your fail criteria here
#
# Test Steps:
#     Add your test steps here
#
# Notes:
#     Add any notes here or remove if none.
#
# Known Bugs:
#     Add any known bugs here
#
# Todo:
#     Add any to do items here or remove if none.
#
# See Also:
#     Add any see also items here, or remove if none
#
# Script Status:
#     Development
#
# End of Header
#==============================================================================

package require AtsAuto
package require rtrUtils
package require topomap
package require Test
package require Async
package require rtrConfig
package require Ipsec

#   Source the .exp file (stored in same directory as the script)
source \[file join \[file dirname \[info script\]\] $scriptName.exp\]

#   set log_user to 0 if you want to see minimum test logs 
#   set log_user to 1 if you want to see maximum test logs 
log_user 1

#
# The line below will contain this file's current cvs revision number. This
# is set automatically by cvs and requires *no* editing. The rev # will also
# be stuffed into \"myversion\" by CVS itself whenever this file is sourced.
#
if {!\[regexp {Revision: *(\[0-9.\]+)} {\$Revision: 1.3 $} => myversion\]} {
    set myversion \"unknown\"
} ; # end if

# Extract the tacacs and enable passwords from the config file if defined
if {\[catch {set tacacspw \[test_passwd tacacs\]}\] == 1} {
    set tacacspw {}
}
if {\[catch {set enablepw \[test_passwd enable\]}\] == 1 || \$enablepw == {}} {
    set enablepw lab
}

#*************************************************************************
#   Set any additional mandatory or optional arguments for the script
#   These are lists in the format: {arg_name type}
#   More information on the valid types can be found at:
#   http://wwwin-people.cisco.com/sereddy/tcl/tcl-params.html#types
#   The example below the script requires a mandatory argument called num 
#   which and integer and an optional arg called interface that must be inside
#   or outside.  Replace these values with ones appropriate for your script
#**************************************************************************

set mandatory_args {
    -ArgName1
    -ArgName2
}

set optional_args {
    -ArgName1  ArgType1
    DEFAULT   Value
    -ArgName2  ArgType2
    DEFAULT   Value

}

#   Initialize the script, using -return_direct will return the script's
#   arguments directly as the variables passed in the arguments. 

aetest::script_init                         \\
     -mandatory_args \$mandatory_args        \\
     -optional_args  \[subst \$optional_args\] \\
     -return_direct                          

#************************************************************************
#set testbeds name and directory for .MAP file
#************************************************************************

    #
    # Figure out if we are running in ats, or standalone in a shared
    # tree or a centralized one.
    #
    set oper_env \[crypto_determine_operating_env\]

    set which_testbed \[lindex \$oper_env 0\]
    set which_directory \[lindex \$oper_env 1\]

    if { \[set coremap \[build_testbed_map \\
        \$which_testbed \$which_directory\]\] == \"FAILED\" } {
        aetest::action \
            -diag \"Get map info failed\" \\
        aetest::action -info  \"testbed map is \\
            \[tclUtils::keylprint coremap\]\"
        return
    }

#==============================================================================
#
# COMMON SETUP SECTION
#
# All testbed setup should be done in this section.  Things that my be included
# in this section may be:
#
# 1) All Testbed initialization procedure calls (init:<proc>)
# 2) Console connections to devices
# 3) Telnet connections to host devices
# 4) Read the MAP file and initialize the interfaces from MAP file
# 5) Setting up stage for CSCCON prompts
# 6) Any Default configurations
# 7) Generate RSA Keys on Routers.
# 8) Clear alignment errors if any.
# 9) Report the platforms for TIMS. 
#
#==============================================================================
#************************************************************************
#***                      COMMON SETUP SECTION                      *****
#************************************************************************

aetest::section common_setup  {

    #******************************************************************
    # Read the MAP file and initialize the interfaces from MAP file
    #******************************************************************

    ex. set host1_uut1_int \[get_int_from_coremap \$host1 \$host1_uut1_int coremap\]

    # *******************************************************************
    # Setting up stage for CSCCON prompts
    # *******************************************************************

    # There are certain situations that require a reponse which
    # csccon normally will not recognize. This circumvents that.
    #
    set CONTINUE_QUERY_RE {^Do +you +want +to +continue\? +\[yes\/no\]:}

    # Some versions will respond with a query when we try to
    # clear counters etc. This sends a response when that happens. 
    #
    csccon_def_patlist_set clear_counters \
        \$CONTINUE_QUERY_RE \
        {
            econ_send \"yes\\r\"
            exp_continue
        }

    #********************************************************************
    #  Setup consoles
    #********************************************************************
    foreach device \[list \$host1 \$uut1 \$uut2 \$host2\] {
        # Avoid CSCCON errors if the telnet session is already open.
        if {\[lsearch \[info procs *\] \$device\] == -1} {
        #
        # Open our console connection.
        #
            if {\[catch {console \$device} rc \]} {
                aetest::action  -diag \"CSCCON console returned error: \$rc\"
                test_terminate
            }
        }
    }
    #********************************************************************
    #  Generate rsa keys in required crypto routers.
    #********************************************************************
    set MODULUS 512

    \$uut1 config \"crypto key generate rsa label \$uut1.cisco.com modulus \$MODULUS\"

    #********************************************************************
    # Clear alignment errors if any
    #********************************************************************

    set uut_list \" \$uut1 \$uut2 \"
    # Clear \"show align\" output
    clear_show_align_ouput \$uut_list

    #********************************************************************
    # Check for correct images.
    #********************************************************************

    if {!\[is_feature_supported\] } {
         aetest::action -diag \"feature is not supported, test will abort\"
         ats_results -result aborted -name \$test_name -write
         return 2
    }

    #********************************************************************
    # Report the platforms for TIMS
    #********************************************************************

    set uut_list \" \$uut1 \$uut2 \"
    set platform \[csccon_get_platform_info \$uut_list\]

    #********************************************************************
    # Start on major configurations.
    #********************************************************************

    if {!\[config_uut -arg1 \$argvalue\] } {
        aetest::action -diag \"configuration for routers failed\"
        aetest::action -goto common_cleanup
    }

}

    #********************************************************************
    #*****                   TESTCASE SECTION                       ***** 
    #********************************************************************

 
    aetest::testcase -tc_id  \$test_name1 {
        set description \"
            1. Step1
            2. Step2
            3. Step3
            4. Step4
            \"

        aetest::action -comments \$description
        
        aetest::section setup {
        
        }
   
        aetest::section test {
        
        }
        
        aetest::section cleanup {
   
        }
    }

    #********************************************************************
    #*****              COMMON CLEANUP SECTION                    ******* 
    #********************************************************************

aetest::section common_cleanup {

} 

# \$Log: CryptoScriptGen,v $
# \Revision 1.3  2008/11/13 16:47:32  inasingh
# \   Adding author name and support alias as users are expanding beyond
# \   ipsec devtest
# \
# \Revision 1.2  2008/01/23 18:46:38  inasingh
# \  Modified the check acording to the crypto devtest agreed upen standard
# \for naming convention for sctipts.
# \
# \Revision 1.1  2007/04/30 22:17:26  inasingh
# \   relocating the file
# \
# \Revision 1.4  2007/04/21 01:40:20  dheron
# \updated ipsec package to conform to conventions of first letter being capatalized... and removed redundancy in some places.
# \
# \Revision 1.3  2007/03/29 23:26:02  inasingh
# \   1. Added Auto Script Name format checking
# \   2. Added Auto EDCS number for testplan insertion.
# \   3. Added Auto Script type, eg. fn, st, pn,ne checking
# \
# \Revision 1.1  2007/03/19 18:24:24  inasingh 
# \Initial Version
# \
#
# ;;; Local Variables: ***
# ;;; mode: tcl ***
# ;;; End: ***

"

#   Close the first file
close $fd

#   Open the .exp file for writing
if [catch {set fd [open $path/$scriptName.exp w+]} errMsg] {
    puts "Error opening file $path/$scriptName.exp for writing\n$errMsg"
    exit
}

puts $fd " 

##Library Header
# \$Id: CryptoScriptGen,v 1.3 2008/11/13 16:47:32 inasingh Exp $
# Copyright (c) [exec date +%G] Cisco Systems, Inc.
#
# Name:
#    $scriptName.exp
#
# Purpose:
#    Library file for $scriptName.
#
# Author:
#    $env(USER) -- $env(USER)@cisco.com
#
# Usage:
#    source [file join [file dirname [info script]] $scriptName.exp]
#
# Description:
#    Add a description of the library here
#
# Requirements:
#    Add any requirements here
#
# Variables:
#    Add any global variables used by the library here
#
# Support Alias:
#    crypto-devtest@cisco.com
#
# Keywords:
#    $scriptName (add any additional key words here)
#
# Category:
#    regression/tests/functionality/ipsec 
#
# Procedure File Status:
#     Development
#
# End of Header
#==============================================================================

# Make sure this file is only sourced once.
global _$scriptName\LibAlreadySourced
if \[info exists _$scriptName\LibAlreadySourced] {
    return
}
set _$scriptName\LibAlreadySourced 1

#
# If the procedure is not shared with other scripts a simple description
# of the procedure goes here
#

proc $scriptName:myProc { args } {
    #Do some stuff

    #Return the result
}


# \$Log: CryptoScriptGen,v $
# \Revision 1.3  2008/11/13 16:47:32  inasingh
# \   Adding author name and support alias as users are expanding beyond
# \   ipsec devtest
# \
# \Revision 1.2  2008/01/23 18:46:38  inasingh
# \  Modified the check acording to the crypto devtest agreed upen standard
# \for naming convention for sctipts.
# \
# \Revision 1.1  2007/04/30 22:17:26  inasingh
# \   relocating the file
# \
# \Revision 1.4  2007/04/21 01:40:20  dheron
# \updated ipsec package to conform to conventions of first letter being capatalized... and removed redundancy in some places.
# \
# \Revision 1.3  2007/03/29 23:26:02  inasingh
# \   1. Added Auto Script Name format checking
# \   2. Added Auto EDCS number for testplan insertion.
# \   3. Added Auto Script type, eg. fn, st, pn,ne checking
# \
# \Revision 1.1  2005/04/19 18:24:24  inasingh 
# \Initial Version
# \
#
# Local Variables:
# mode:tcl
# End:
#

"

close $fd
puts "Created the files:\n$path/$scriptName\n$path/$scriptName.exp"
exit


#!/bin/sh
# xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
set starter { ${1:+"$@"}
    shift
    shift
    export AUTOTEST
    AUTOTEST="${AUTOTEST-/autons/autotest}"
    exec $AUTOTEST/bin/expect -f $0 -- ${1:+"$@"}
}
# xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
##s
# $Id: srs,v 1.2 2006/09/21 18:51:18 tennis Exp $
# Copyright (c) 2006 Cisco Systems, Inc.
#
# Name:
# ~~~~~
#     srs - <S>how <R>outer <S>how
#
#
# Purpose:
# ~~~~~~~~
#  Test the "router_show" utility via the unix cli.
#
# Author:
# ~~~~~~~
#    Tennis Smith
#
#
# Description:
# ~~~~~~~~~~~~
#  The stellar "router_show" utility routines parse router output.  This
#  utility will take a file containing router output, run it through
#  router_show, and then print the keyed list. This provides a good way
#  to visualize what key/value pairs one needs to query when using
#  router_show.
#
#  This is useful for creating new regex's for router_show and for
#  seeing what existing parsers do with ios commands.
#
#
# Topology:
# ~~~~~~~~~
# NA
#
# Synopsis:
# ~~~~~~~~~
#  srs -input_file <file with sample output> -ios_cmd <cmd being parsed>
#
# Arguments:
# ~~~~~~~~~~
#
# -input_file - a file which contains a sample of the output being parsed
#
# -ios_cmd - the ios command that has been defined for parsing in
#            router_show
#
# -print_input_file (optional) - print the contents of the input file along
#                                with the data structures created from it.
#
#
# Sample Usage:
# ~~~~~~~~~~~~~
#  srs -input_file router_show_adj.txt -ios_cmd "show adjacency detail"
#
#
# Sample Input File (router_show_adj.txt):
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#
#          Protocol Interface                 Address
#          IP       Vlan1                     200.200.10.2(5)
#                                             10 packets, 1140 bytes
#                                             00137F12CC6000135F68081E0800
#                                             ARP        04:02:40
#                                             Epoch: 0
#          IP       Virtual-Access1           point2point(21)
#                                             10 packets, 1800 bytes
#                                             001360FEA6C000135F68082888641100
#                                             000400000021
#                                             CEF   expires: 00:02:58
#                                                   refresh: 00:00:27
#                                             Epoch: 0
# Sample Output:
# ~~~~~~~~~~~~~~
#
#        SRS-00-003I: Data structure produced:
#
#        --------------------------- Keyed List: kl ---------------------------
#        ip
#            vlan1
#                200_200_10_2
#                    packets                 = 10
#                    bytes                   = 1140
#            virtual-access1
#                point2point
#                    packets                 = 10
#                    bytes                   = 1800
#                    cef_expire              = 00:02:58
#                    cef_refresh             = 00:00:27
#        ----------------------------------------------------------------------
#
#
# Notes:
# ~~~~~
#
#
# Known Bugs:
# ~~~~~~~~~~~
# None.
#
#
# Todo:
# ~~~~~
# - Add CATOS cmd support? Probabaly not.
#
# End of Header

package require Cisco
package require TclUtils
package require parse_dashed_args
package require router_show
package require rtrUtils
package require fileutil

# Write output *immediately*
fconfigure stdout -buffering none
fconfigure stderr -buffering none

#first, get rid of the script name from the cli.
test_name [shift argv]

# Mandatory parms
set man_list {
    -input_file ANY
    -ios_cmd ANY
}

set opt_list {
    -print_input_file FLAG
    DEFAULT 0
}

parse_dashed_args              \
    -args $argv                \
    -mandatory_args $man_list  \
    -optional_args $opt_list

#
# make sure we actually have a file to use.
#
if {[file exists $input_file]} {

    set kl {}

    #
    # Having made sure the file exists, now try calling router_show, but
    # wrap it in a catch so we can debug any problems.
    #
    if {[catch {set kl \
                    [router_show -file $input_file -cmd $ios_cmd]} \
             catch_rc ]} {
        puts stderr "SRS-00-002E - ERROR from router_show:\n$catch_rc"
    } else {

        #
        # print the intput file before the output generated.
        # Useful for debugging and input/output comparison.
        #
        if {$print_input_file} {
            puts stdout "SRS-00-004I: Input file:\n\
                         [fileutil::cat $input_file]"
        } else {
            puts stdout "SRS-00-009I Not printing input file."
        } ; # end if

        #
        # Make sure we actually created some output
        #
        if {[lempty $kl]} {
            puts stderr "SRS-00-005E ERROR: No output created!"
        } else {
            puts stdout "SRS-00-003I: Data structure produced:\n\
                    [tclUtils::keylprint kl]"
        } ; # end if
    } ; # end if
} else {
    puts stderr "SRS-00-001I - ERROR: cannot find $input_file!"
} ; # end if


# -----------------------------------------------------------------------------
#                            CVS MAINTENANCE LOGS
#                            ~~~~~~~~~~~~~~~~~~~~
# $Log: srs,v $
# Revision 1.2  2006/09/21 18:51:18  tennis
#
# Various updates to some minor support utilities.
#
# Revision 1.1  2006/08/26 20:10:21  tennis
# initial commit
#
#
# -----------------------------------------------------------------------------
# Local Variables:
# mode: tcl
# End:

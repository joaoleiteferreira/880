#!/bin/sh
# xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
set starter { ${1:+"$@"}
    shift
    shift
    export AUTOTEST
    AUTOTEST="${AUTOTEST-/autons/autotest}"
    exec $AUTOTEST/bin/expect -f $0 -- ${1:+"$@"}
}
# xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
##s
# $Id: iou_sniff,v 1.1 2006/03/15 17:28:02 tennis Exp $
# Copyright (c) 2005 Cisco Systems, Inc.
#
# Name:
# ~~~~~
#     iou_sniff
#
#
# Purpose:
# ~~~~~~~~
#     Given a router's testbed, number, interface number and (optionally)
#     interface protocol type, this will start up a text version of
#     "ethereal" and sniff the line.
#
#
# Author:
# ~~~~~~~
#    Tennis Smith
#
#
# Description:
# ~~~~~~~~~~~~
#
#
# Topology:
# ~~~~~~~~~
#  NA
#
# Synopsis:
# ~~~~~~~~~
#
#
# Arguments:
# ~~~~~~~~~~
#
#
# Sample Usage:
# ~~~~~~~~~~~~~
#
#
# Pass/Fail Criteria:
# ~~~~~~~~~~~~~~~~~~~
#     Pass - NA
#
#     Fail - NA
#
# Known Bugs:
# ~~~~~~~~~~~
#     None
#
#
# Todo:
# ~~~~~
#  - Add the ability to save the output to a file
#
# End of Header

package require Async
package require AtsAuto
package require Cisco
package require Gd
package require TclUtils
package require Test
package require control
package require math::statistics
package require parse_dashed_args
package require router_show
package require rtrConfig
package require rtrUtils
package require topomap
package require fileutil
source $env(AUTOTEST)/lib/cisco-shared/golden/pkg/UTX/UTX.exp
source $env(AUTOTEST)/stg_reg/utils/bbitc.lib

global env testbed
# Write output to stdout *immediately*
fconfigure stdout -buffering none
fconfigure stderr -buffering none

# The last entry on the NETMAP line is the sniffer device:port
set EXTRACT_SNIFFER_PORT_RE { +([\d]+\:[\d]+)}
set SERIAL_INERFACE_RE {^[s]}
set SERIAL_OR_ETHERNET_RE {^[se]}

#first, get rid of the script name from the cli.
test_name [shift argv]

# Mandatory Parms
set man_list {
    -testbed_number RANGE 1-64
    -router_number RANGE 1-16
    -port ANY
}

# H for Cisco HDLC framing (DLT_C_HDLC)
# Q PPP in HDLC-like framing, as per RFC 1662
# P for DLT_PPP
set opt_list {
    -serial_framing CHOICES hdlc ppp dlt_ppp
    DEFAULT ppp
}

parse_dashed_args -args $argv \
    -optional_args $opt_list \
    -mandatory_args $man_list

proc inputHandler {channel} {

    if {[gets $channel line] == -1} {
        if {[eof $channel]} {
            ipsec::debug "\[tail died (pid $::pid)]";
            set ::forever now
        }
    } else {
        puts $line
    }
}

set port [string tolower $port]

#
# Interfaces need correct formatting or we're unable to
# continue
#
if {![regexp -line -- $SERIAL_OR_ETHERNET_RE $port]} {

    puts "please specify a serial or an ethernet port name:\nex.\n\
          serial6/0 or s6/0 or ser6/0\n\
          OR\n\
          ethernet0/0 or e0/0 or eth0/0"

} ; # end if

set testbed "iou_testbed$testbed_number"

set device [bbitc_device_number \
                -testbed_number $testbed_number\
                -device_number $router_number]

set local_port [bbitc_calc_intf -intf $port]

set device_port_numeric "$device:$local_port"

ipsec::debug "We want to sniff $device_port_numeric"

set netmap_line [::fileutil::grep $device_port_numeric \
                   "$env(AUTOTEST)/etc/iou-configs/$testbed/NETMAP"]

ipsec::debug "netmap_line = $netmap_line"

set last_colon [string last {:} $netmap_line]

#
# The last colon in in the middle of the sniffer port
# def, so back up 5 chars to make sure we have the entire
# def scan-able.
#
set last_map_def [expr { $last_colon - 5 } ]

ipsec::debug "last colon $last_colon"

#
# Did we snag the sniffer port
#
if {[regexp -all -start $last_map_def -- \
         $EXTRACT_SNIFFER_PORT_RE $netmap_line - sniffer_port]} {

    ipsec::debug "sniffer port is $sniffer_port"

    cd "$env(AUTOTEST)/etc/iou-configs/$testbed"

    #
    # If we're trying to monitor a serial interface, then
    # we have to use the optional "serial_framing" parm to
    # tell tethereal what flavor of serial we have.
    #
    if {[regexp -line -- $SERIAL_INERFACE_RE $port]} {

        #
        # Translate to the correct flag for tethereal
        #
        if {[cequal $serial_framing  {hdlc}]} {
            set sniff_intf_type "H"
        } elseif {[cequal $serial_framing {ppp}]} {
            set sniff_intf_type "Q"
        } elseif [cequal $serial_framing {dlt_ppp}]{} {
            set sniff_intf_type "P"
        } else {
            puts "SHOULD NOT OCCUR! Framing type invalid!"
            return 0
        } ; # end if

    } else {
        set sniff_intf_type "E"
    } ; # end if


    # -l = "Flush the standard output after the information for each
    #      packet is printed."
    set cmd "/usr/cisco/bin/tethereal -l -i IOU$sniff_intf_type$sniffer_port"

    ipsec::debug "opening pipe with: $cmd"

    set pipe [open "| $cmd " r]

    set ::pid [pid $pipe]

    puts "sniffer process started. pid = $::pid"

    #
    # Don't buffer any data, write everything immediately.
    #
    fconfigure $pipe -buffering none

    fileevent $pipe readable [list inputHandler $pipe]

    vwait ::forever

} else {
    puts "Could not extract sniffer in:\n$netmap_line"
} ; # end if


# -----------------------------------------------------------------------------
#                            CVS MAINTENANCE LOGS
#                            ~~~~~~~~~~~~~~~~~~~~
# $Log: iou_sniff,v $
# Revision 1.1  2006/03/15 17:28:02  tennis
#
# Initial commit
#
#
# -----------------------------------------------------------------------------
# Local Variables:
# mode: tcl
# End:
